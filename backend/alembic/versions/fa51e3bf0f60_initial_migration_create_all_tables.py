"""Initial migration: Create all tables

Revision ID: fa51e3bf0f60
Revises: 
Create Date: 2025-07-15 18:59:07.831228

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fa51e3bf0f60'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tags',
    sa.Column('tag_id', sa.UUID(), nullable=False, comment='Unique identifier for the tag'),
    sa.Column('name', sa.String(), nullable=False, comment='Unique tag name/text'),
    sa.PrimaryKeyConstraint('tag_id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Unique identifier for the user'),
    sa.Column('user_name', sa.String(), nullable=False, comment='Display name - user can modify this'),
    sa.Column('email', sa.String(), nullable=True, comment="User's email address"),
    sa.Column('phone', sa.String(), nullable=True, comment="User's phone number (optional)"),
    sa.Column('profile_picture', sa.String(), nullable=True, comment="URL to user's profile picture"),
    sa.Column('gender', sa.String(), nullable=True, comment="User's gender (optional)"),
    sa.Column('google_id', sa.String(), nullable=True, comment='Google OAuth ID for authentication'),
    sa.Column('is_private', sa.Boolean(), nullable=False, comment="If True, user's content is only visible to followers"),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the user account was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last time user data was modified'),
    sa.PrimaryKeyConstraint('user_id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('google_id'),
    sa.UniqueConstraint('phone'),
    sa.UniqueConstraint('user_name')
    )
    op.create_table('conversations',
    sa.Column('conversation_id', sa.UUID(), nullable=False, comment='Unique identifier for the conversation'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Creator of the conversation'),
    sa.Column('title', sa.String(), nullable=False, comment='Conversation title'),
    sa.Column('forked_from', sa.UUID(), nullable=True, comment='Post ID this conversation was forked from (if any)'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the conversation was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last time conversation was modified'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('conversation_id')
    )
    op.create_table('follows',
    sa.Column('follower_id', sa.UUID(), nullable=False, comment='User who is following'),
    sa.Column('following_id', sa.UUID(), nullable=False, comment='User being followed'),
    sa.Column('status', sa.String(), nullable=False, comment="Follow status: 'pending', 'accepted', 'archived'"),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When the follow request was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='Last time follow status was modified'),
    sa.CheckConstraint("status IN ('pending', 'accepted', 'archived')", name='valid_follow_status'),
    sa.CheckConstraint('follower_id != following_id', name='no_self_follow'),
    sa.ForeignKeyConstraint(['follower_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['following_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('follower_id', 'following_id')
    )
    op.create_table('messages',
    sa.Column('message_id', sa.UUID(), nullable=False, comment='Unique identifier for the message'),
    sa.Column('conversation_id', sa.UUID(), nullable=False, comment='Conversation this message belongs to'),
    sa.Column('user_id', sa.UUID(), nullable=True, comment='Author of the message (null for AI messages)'),
    sa.Column('role', sa.String(), nullable=False, comment="Message role: 'user', 'assistant', 'system'"),
    sa.Column('content', sa.Text(), nullable=False, comment='Message content'),
    sa.Column('is_blog', sa.Boolean(), nullable=False, comment='True if this message is a candidate for blog post creation'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the message was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last time message was modified'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.conversation_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('message_id')
    )
    op.create_table('posts',
    sa.Column('post_id', sa.UUID(), nullable=False, comment='Unique identifier for the post'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Creator of the post'),
    sa.Column('conversation_id', sa.UUID(), nullable=False, comment='Source conversation for this post'),
    sa.Column('title', sa.String(), nullable=False, comment='Post title'),
    sa.Column('content', sa.Text(), nullable=False, comment='Post content'),
    sa.Column('is_conversation_visible', sa.Boolean(), nullable=False, comment='If TRUE, the conversation linked to this post is viewable by others'),
    sa.Column('edited', sa.Boolean(), nullable=False, comment='True if post has been edited'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the post was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Last time post was modified'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.conversation_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('post_id')
    )
    op.create_table('comments',
    sa.Column('comment_id', sa.UUID(), nullable=False, comment='Unique identifier for the comment'),
    sa.Column('post_id', sa.UUID(), nullable=False, comment='Post this comment belongs to'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Author of the comment'),
    sa.Column('parent_comment_id', sa.UUID(), nullable=True, comment='Parent comment for replies (null for top-level comments)'),
    sa.Column('content', sa.Text(), nullable=False, comment='Comment content'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When the comment was created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='Last time comment was modified'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.CheckConstraint('LENGTH(TRIM(content)) > 0', name='content_not_empty'),
    sa.ForeignKeyConstraint(['parent_comment_id'], ['comments.comment_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.post_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('comment_id')
    )
    op.create_table('post_reactions',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who made the reaction'),
    sa.Column('post_id', sa.UUID(), nullable=False, comment='Post being reacted to'),
    sa.Column('reaction', sa.String(), nullable=False, comment='Type of reaction: upvote, downvote, heart, insightful, accurate'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When the reaction was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When the reaction was last changed'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.CheckConstraint("reaction IN ('upvote', 'downvote', 'heart', 'insightful', 'accurate')", name='valid_reaction_type'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.post_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('user_id', 'post_id')
    )
    op.create_table('post_shares',
    sa.Column('share_id', sa.UUID(), nullable=False, comment='Unique identifier for the share event'),
    sa.Column('post_id', sa.UUID(), nullable=False, comment='Post being shared'),
    sa.Column('shared_by_user_id', sa.UUID(), nullable=True, comment='User who shared the post (null for anonymous shares)'),
    sa.Column('platform', sa.String(length=50), nullable=True, comment="Platform where post was shared: 'direct_link', 'twitter', 'facebook', etc."),
    sa.Column('shared_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When the share was created'),
    sa.Column('status', sa.String(length=20), nullable=False, comment="Share status: 'active', 'archived'"),
    sa.Column('share_metadata', sa.JSON(), nullable=True, comment='Additional metadata for future extensions (referrer, analytics, etc.)'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.post_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['shared_by_user_id'], ['users.user_id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('share_id')
    )
    op.create_table('post_tags',
    sa.Column('post_id', sa.UUID(), nullable=False, comment='Post being tagged'),
    sa.Column('tag_id', sa.UUID(), nullable=False, comment='Tag applied to the post'),
    sa.ForeignKeyConstraint(['post_id'], ['posts.post_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.tag_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('post_id', 'tag_id')
    )
    op.create_table('post_views',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who viewed the post'),
    sa.Column('post_id', sa.UUID(), nullable=False, comment='Post that was viewed'),
    sa.Column('viewed_at', sa.DateTime(timezone=True), nullable=False, comment='When the post was viewed'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='Last modification time'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.ForeignKeyConstraint(['post_id'], ['posts.post_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'post_id', 'viewed_at')
    )
    op.create_table('comment_reactions',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who made the reaction'),
    sa.Column('comment_id', sa.UUID(), nullable=False, comment='Comment being reacted to'),
    sa.Column('reaction', sa.String(), nullable=False, comment='Type of reaction: upvote, downvote, heart, insightful, accurate'),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False, comment='When the reaction was first created'),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False, comment='When the reaction was last changed'),
    sa.Column('status', sa.String(), nullable=False, comment="Record status: 'active', 'archived', etc."),
    sa.CheckConstraint("reaction IN ('upvote', 'downvote', 'heart', 'insightful', 'accurate')", name='valid_comment_reaction_type'),
    sa.ForeignKeyConstraint(['comment_id'], ['comments.comment_id'], ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('user_id', 'comment_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comment_reactions')
    op.drop_table('post_views')
    op.drop_table('post_tags')
    op.drop_table('post_shares')
    op.drop_table('post_reactions')
    op.drop_table('comments')
    op.drop_table('posts')
    op.drop_table('messages')
    op.drop_table('follows')
    op.drop_table('conversations')
    op.drop_table('users')
    op.drop_table('tags')
    # ### end Alembic commands ###
