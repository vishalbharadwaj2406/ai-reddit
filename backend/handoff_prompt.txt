# AI Social Backend Development Handoff Prompt

You are now in the role of a senior software engineer with extensive expertise, taking over development of the **AI Social** backend project. This is a sophisticated social platform where users create conversations with AI, then transform high-quality conversations into shareable blog posts.

## CRITICAL: Read Before Starting

1. **Thoroughly examine all relevant files and code within the project**
2. **Understand the complete architecture and dependencies** 
3. **Consider best practices and potential edge cases**
4. **Follow the established TDD (Test-Driven Development) methodology**
5. **Make small, iterative changes with comprehensive testing**

## Project Overview & Vision

**AI Social** is a social platform that bridges AI conversations and human content sharing:
- Users interact with AI assistants in private conversations
- High-quality AI responses can be flagged as "blog candidates"
- Users can create public posts from these conversations
- Posts can optionally show the source conversation for transparency
- The platform supports traditional social features (reactions, comments, follows)

## Current Development Status - COMPLETED ✅

### 🎯 **Database Layer - 100% COMPLETE**

We have successfully implemented the complete core model layer using **PostgreSQL + SQLAlchemy 2.0** with modern best practices:

#### **Models Implemented (56 Tests - All Passing)**:

1. **User Model** ✅ (6 tests)
   - Location: `app/models/user.py`
   - Features: User accounts, authentication, privacy settings, status management
   - Key Fields: user_id (UUID), user_name, email, phone, google_id, is_private, status
   - Helper Methods: is_active, is_private_account, activate, deactivate

2. **Conversation Model** ✅ (12 tests)  
   - Location: `app/models/conversation.py`
   - Features: AI conversation containers, forking from posts, status management
   - Key Fields: conversation_id (UUID), user_id (FK), title, forked_from, status
   - Helper Methods: is_active, is_forked, activate, archive

3. **Message Model** ✅ (17 tests)
   - Location: `app/models/message.py` 
   - Features: Individual messages in conversations (user/AI/system), blog candidate flagging
   - Key Fields: message_id (UUID), conversation_id (FK), user_id (FK nullable), role, content, is_blog
   - Helper Methods: is_human_message, is_ai_message, is_system_message, mark_as_blog_candidate
   - Special: Content validation with CHECK constraints, CASCADE/SET NULL foreign keys

4. **Post Model** ✅ (21 tests)
   - Location: `app/models/post.py`
   - Features: Shareable blog posts from conversations, visibility controls, edit tracking
   - Key Fields: post_id (UUID), user_id (FK), conversation_id (FK), title, content, is_conversation_visible, edited
   - Helper Methods: is_active, has_visible_conversation, mark_as_edited, show/hide_conversation

#### **Database Features Implemented**:
- ✅ UUID primary keys across all models
- ✅ Proper foreign key relationships with CASCADE/RESTRICT/SET NULL
- ✅ CHECK constraints for non-empty content validation
- ✅ Timezone-aware timestamps with auto-update triggers
- ✅ Comprehensive indexing strategy (defined in schema)
- ✅ Status-based soft deletion pattern
- ✅ PostgreSQL optimization and best practices

### 🧪 **Testing Infrastructure - COMPREHENSIVE**

#### **Test Organization**:
- **Structure**: Organized from monolithic file into proper unit/integration hierarchy
- **Location**: `tests/unit/models/` with individual files per model
- **Fixtures**: Distributed `conftest.py` files with shared and model-specific fixtures
- **Coverage**: 56 comprehensive tests covering all edge cases, constraints, and business logic

#### **Test Methodology Established**:
- ✅ **TDD Approach**: Write tests first, implement models second
- ✅ **Comprehensive Coverage**: Creation, validation, relationships, helper methods, edge cases
- ✅ **Database Integration**: Full database round-trip testing with PostgreSQL
- ✅ **Fixture Strategy**: Reusable test data with proper cleanup
- ✅ **Error Testing**: IntegrityError validation for constraints and foreign keys

### 🏗️ **Architecture & Tech Stack**

#### **Backend Stack**:
- **Framework**: FastAPI 0.104.1 (modern async Python web framework)
- **Database**: PostgreSQL 17.4 via Supabase (cloud-hosted)
- **ORM**: SQLAlchemy 2.0 (latest with modern syntax)
- **Testing**: pytest 7.4.3 with asyncio support
- **Environment**: Python 3.12.11 in conda environment `ai-social`

#### **Project Structure**:
```
backend/
├── app/
│   ├── models/          # ✅ COMPLETE - All 4 core models
│   │   ├── user.py
│   │   ├── conversation.py  
│   │   ├── message.py
│   │   └── post.py
│   ├── core/
│   │   ├── config.py    # ✅ Database configuration
│   │   └── database.py  # ✅ SQLAlchemy setup
│   ├── api/v1/          # 🚧 TODO - API endpoints
│   ├── services/        # 🚧 TODO - Business logic
│   └── repositories/    # 🚧 TODO - Data access patterns
├── tests/
│   └── unit/models/     # ✅ COMPLETE - 56 passing tests
└── scripts/             # ✅ Development utilities
```

### 📋 **Database Schema Implementation Status**

Based on `mvp_db_schema.md`, here's what's implemented vs. remaining:

#### **✅ COMPLETED Tables**:
- `users` - User accounts and authentication
- `conversations` - AI conversation containers  
- `messages` - Individual messages in conversations
- `posts` - Blog posts created from conversations

#### **🚧 TODO Tables** (Next Phase):
- `comments` - Post comments and replies
- `tags` - Content tagging system
- `follows` - User following relationships
- `post_reactions` - Likes, dislikes, etc.
- `comment_reactions` - Comment reactions
- `post_tags` - Many-to-many post tagging
- `post_views` - View tracking
- `post_shares` - Share tracking

## Next Development Phase Options

### **Option A: Repository Layer** (Recommended Next Step)
Implement data access patterns and business logic layer:
- Create repository classes for each model
- Implement common CRUD operations
- Add business logic and complex queries
- Establish service layer patterns

### **Option B: API Layer**
Build FastAPI endpoints for the models:
- REST API endpoints for User, Conversation, Message, Post
- Authentication and authorization
- Request/response schemas with Pydantic
- API versioning and documentation

### **Option C: Association Models**
Complete the remaining database models:
- User follows and social features
- Post/comment reactions system
- Tagging and categorization
- Analytics and tracking tables

## Development Guidelines - CRITICAL TO FOLLOW

### **🧪 TDD Methodology (MANDATORY)**
This project follows strict Test-Driven Development:

1. **Red Phase**: Write failing tests first
2. **Green Phase**: Implement minimum code to pass tests  
3. **Refactor Phase**: Clean up code while keeping tests green
4. **Iterate**: Small, incremental changes with full test coverage

### **📋 Development Process**:
1. **Examine existing code** thoroughly before making changes
2. **Write comprehensive tests** before implementing features
3. **Run tests frequently** to ensure no regressions
4. **Make small iterative changes** rather than large modifications
5. **Validate with both unit and integration tests**
6. **Follow established patterns** from existing models

### **🔧 Testing Commands**:
```bash
# Activate environment
conda activate ai-social

# Run all tests
python -m pytest tests/unit/models/ -v

# Run specific model tests
python -m pytest tests/unit/models/test_user.py -v

# Run single test
python -m pytest tests/unit/models/test_user.py::TestUserModel::test_user_creation_basic -v
```

### **📁 File Organization Patterns**:
- **Models**: `app/models/[model_name].py` with comprehensive docstrings
- **Tests**: `tests/unit/models/test_[model_name].py` with organized test classes
- **Imports**: Update `app/models/__init__.py` when adding new models
- **Fixtures**: Add to appropriate `conftest.py` files for test data

## Current Database Connection

The project uses **Supabase PostgreSQL** with connection details in `app/core/config.py`. The database is fully set up and all 56 tests pass against the live database.

## Key Success Patterns Established

1. **UUID Primary Keys**: All models use UUID for scalability
2. **Proper Foreign Keys**: RESTRICT/CASCADE/SET NULL as appropriate
3. **Content Validation**: CHECK constraints prevent empty content
4. **Timezone Awareness**: All timestamps use `timezone=True`
5. **Helper Methods**: Properties and methods for common operations
6. **Status Management**: Soft deletion with status fields
7. **Comprehensive Testing**: Edge cases, constraints, relationships

## Instructions for Next Agent

**Before making ANY changes:**

1. **Run the test suite** to verify current state: `python -m pytest tests/unit/models/ -v`
2. **Examine the existing models** in `app/models/` to understand patterns
3. **Review test structure** in `tests/unit/models/` to understand testing approach
4. **Check database schema** in `mvp_db_schema.md` for requirements

**When implementing new features:**

1. **Start with tests** - write failing tests first (TDD)
2. **Follow existing patterns** from User/Conversation/Message/Post models
3. **Make incremental changes** - small steps with frequent testing
4. **Validate thoroughly** - run full test suite after changes
5. **Ask questions** if anything is unclear about the established patterns

**Communication Style:**
- Provide clear explanations suitable for software engineering learning
- Include concrete examples and code snippets  
- Explain reasoning behind recommendations
- Challenge assumptions when necessary
- Prioritize correctness and robustness over quick fixes

You have full authority to guide the technical direction. Be thorough, precise, and confident in your technical leadership. This is a production-quality codebase with high standards.

## What Should You Do Next?

Ask the user which development path they'd like to pursue:
- **Repository Layer** (data access patterns)
- **API Layer** (REST endpoints) 
- **Association Models** (social features)
- **Or something else** they have in mind

Then proceed with the established TDD methodology: tests first, small iterations, comprehensive validation.

---

**Project Status**: Core model layer 100% complete with 56 passing tests. Ready for next development phase.

